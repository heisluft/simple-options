package de.heisluft.cli.simpleopt;

/**
 * This Exception is thrown whenever the {@link OptionParser} fails to parse a command line string
 * unambiguously. It always has a reason attached for easier handling.
 *
 * @since 0.1.0
 */
public class OptionParseException extends RuntimeException {
  /**
   * Denotes the reason why option parsing failed.
   */
  public enum Reason {
    /** An option was defined twice. */
    DUPLICATE_OPTION("Option '{0}' is defined twice"),
    /** An option requiring a value did not have its value set. */
    MISSING_VALUE("Option '{0}' requires an argument, but none is given"),
    /** Multiple options declaring consumption of a value defined in same short option grouping. */
    ARG_GROUPING_CONFLICT("Multiple options with required arguments defined in the same group");
    /**
     * The template for constructing an exception message. {@code {0}} is substituted for the
     * offending options long name.
     */
    private final String msgTemplate;

    /**
     * Constructor for the reason.
     *
     * @param msgTemplate The template for constructing an exception message. {@code {0}} is
     * substituted for the offending options long name in {@link #getMessage(String)}
     */
    private Reason(String msgTemplate) {
      this.msgTemplate = msgTemplate;
    }

    /**
     * Generates an error message based on this enum values template as well as the given input
     * string. The pattern {@code {0}} of the template is substituted with the input string.
     *
     * @param option the offending options long name.
     *
     * @return the error message string.
     */
    String getMessage(String option) {
      return msgTemplate.replace("{0}", option);
    }
  }
  /** The reason why parsing failed. */
  public final Reason reason;
  /** The long name of the option that caused parsing to fail. */
  public final String option;

  /**
   * Constructs a new instance. The message will be auto-generated by
   * {@link Reason#getMessage(String)}.
   *
   * @param reason the reason why parsing failed.
   * @param option the long name of the option that caused parsing to fail.
   */
  OptionParseException(Reason reason, String option) {
    super(reason.getMessage(option));
    this.reason = reason;
    this.option = option;
  }
}
